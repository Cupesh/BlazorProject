@page "/monthlyreports/{year:int}/{month:int}"

@using BlazorProject.Client.HttpRepository
@using BlazorProject.Client.Models
@using BlazorProject.Client.Components
@inject HttpClient Http
@inject IMonthlyReportsHttpRepository MonthlyReportsHttRepo
@inject NavigationManager NavManager

@if (isWorking)
{
    <p>Loading...</p>
}
else
{
    <h3>Monthly report for @month.ToString() / @year.ToString()</h3>

    <p>Generated total of £@report.PaymentsPerContracts.Sum(x => x.Value).ToString()</p>
    <p>Total hours for this period: @report.SumHoursByClient.Sum(x => x.Value).ToString()</p>

    <p>@report.FilteredContracts.Count().ToString() contracts were completed for this period:</p>
    <table>
        <thead>
            <tr>
                <th>Date Requested</th>
                <th>Id</th>
                <th>Description</th>
                <th>Payment</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contract in report.FilteredContracts)
            {
                <tr>
                    <td>@contract.DateRequested.ToString("dd-MMMM")</td>
                    <td>@contract.Id</td>
                    <td>@contract.Description</td>
                    @foreach (KeyValuePair<Models.Contract, decimal> entry in report.PaymentsPerContracts)
                    {
                        if (entry.Key.Id == contract.Id)
                        {
                            <td>£@entry.Value.ToString()</td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>

    <p>------------------------------------------------------</p>
    <p>Breakdown per client: </p>
    <table>
        <thead>
            <tr>
                <th>Client</th>
                <th>Hours Contracted</th>
                <th>Paid</th>
            </tr>
        </thead>
        <tbody>
            @foreach (KeyValuePair<Models.Client, int> entry in report.SumHoursByClient)
            {
                <tr>
                    <td>@entry.Key.Name</td>
                    <td>@entry.Value.ToString()</td>
                    @foreach (KeyValuePair<Models.Client, decimal> anEntry in report.PaymentsPerClients)
                    {
                        if (anEntry.Key.Id == entry.Key.Id)
                        {
                            <td>£@anEntry.Value.ToString()p</td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>

    <p>----------------------------------------------------------</p>
    <p>Breakdown per employee:</p>
    <table>
        <thead>
            <tr>
                <th>Employee</th>
                <th>Total Hours</th>
                <th>Total monies generated</th>
            </tr>
        </thead>
    </table>
    <tbody>
        @foreach (KeyValuePair<Models.Employee, int> entry in report.SumHoursByEmployee)
        {
            <tr>
                <td>@entry.Key.FirstName @entry.Key.LastName</td>
                <td>@entry.Value.ToString()</td>
                @foreach (KeyValuePair<Models.Employee, decimal> anEntry in report.PaymentsPerEmployee)
                {
                    if (anEntry.Key.Id == entry.Key.Id)
                    {
                        <td>£@anEntry.Value.ToString()p</td>
                    }
                }
            </tr>

        }
    </tbody>
}


@code {
    [Parameter]
    public int year { get; set; }
    [Parameter]
    public int month { get; set; }

    private bool isWorking { get; set; } = true;

    private Models.MonthlyReport report { get; set; }
    private MonthlyReportsGenerator reportGenerator { get; set; }

    protected override async Task OnInitializedAsync()
    {
        reportGenerator = new MonthlyReportsGenerator(year, month);
        await reportGenerator.GetData();
        await reportGenerator.Generate();
        report = reportGenerator.Report;

        isWorking = false;
    }

}
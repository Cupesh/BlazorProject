@page "/contracts"

@using BlazorProject.Client.HttpRepository
@using BlazorProject.Client.Models
@inject HttpClient Http
@inject IContractsHttpRepository ContractsHttpRepo
@inject NavigationManager NavManager

<h3>Contracts</h3>

@if (contracts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="AddContract">Add Contract</button>
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Date Requested</th>
                <th>Contractor</th>
                <th>Completed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contract in contracts)
            {
                <tr>
                    <td>@contract.Id</td>
                    <td>@contract.DateRequested.ToString("dd-MM-yyyy")</td>
                    <td>@contract.Contractor</td>
                    <td>@contract.Completed</td>
                    <td><button class="btn btn-primary" @onclick="() => ViewEdit(contract.Id)">View/Edit</button></td>
                    <td><button class="del btn btn-primary" @onclick="() => DeleteContract(contract.Id)">X</button></td>
                </tr>
            }
        </tbody>
    </table>
    <style>
        .del {
            color: black;
            background-color: red;
        }

            .del:hover {
                background-color: darkred;
            }
    </style>
}

@code {
    private List<Models.Contract> contracts;

    protected override async Task OnInitializedAsync()
    {
        var result = await ContractsHttpRepo.GetAll();

        contracts = result.ToList();
    }

    private void ViewEdit(int id)
    {
        NavManager.NavigateTo("/contract/" + id);
    }

    private async Task DeleteContract(int id)
    {
        await ContractsHttpRepo.DeleteOne(id);
        await OnInitializedAsync();
    }

    private void AddContract()
    {
        NavManager.NavigateTo("/newcontract");
    }
}

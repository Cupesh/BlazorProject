@page "/quarterlyreport/new/{year:int}/{quarter:int}"

@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.LayoutLib
@using BlazorProject.Client.HttpRepository
@using BlazorProject.Client.Models
@using BlazorProject.Client.Components
@using System.Globalization
@inject HttpClient Http
@inject IMonthlyReportsHttpRepository MonthlyReportsHttRepo
@inject NavigationManager NavManager

@if (isWorking)
{
    <p>Loading...</p>
}
else
{
    <h3>Quarterly report @quarter.ToString()/@year.ToString()</h3>
    <PlotlyChart Id="TestId" Config="config" Layout="layoutPaymentsChart" Data="dataPaymentsChart" @ref="paymentsChart" />
    <table>
        <tr>
            <td><div id="chart1_div" style="width: 400px; height: 300px;"><PlotlyChart Id="AnotherID" Config="config" Layout="layoutMonthOneChart" Data="dataMonthOneChart" @ref="monthOneChart" /></div></td>
            <td><div id="chart2_div" style="width: 400px; height: 300px;"><PlotlyChart Id="AnotherOneID" Config="config" Layout="layoutMonthTwoChart" Data="dataMonthTwoChart" @ref="monthTwoChart" /></div></td>
            <td><div id="chart3_div" style="width: 400px; height: 300px;"><PlotlyChart Id="AnotherOneNewID" Config="config" Layout="layoutMonthThreeChart" Data="dataMonthThreeChart" @ref="monthThreeChart" /></div></td>
        </tr>
    </table>
    

    <PlotlyChart Id="DifferentId" Config="config" Layout="layoutHoursChart" Data="dataHoursChart" @ref="hoursChart" />
}


@code
{
    [Parameter]
    public int year { get; set; }
    [Parameter]
    public int quarter { get; set; }

    private bool isWorking { get; set; } = true;
    private MonthlyReportsGenerator reportGenerator { get; set; }
    private List<Models.MonthlyReport> reports { get; set; }
    private List<int> months;
    private PlotlyChart paymentsChart;
    private PlotlyChart hoursChart;
    private PlotlyChart monthOneChart;
    private PlotlyChart monthTwoChart;
    private PlotlyChart monthThreeChart;
    private Config config = new Config
    {
        Responsive = true
    };
    private Layout layoutPaymentsChart;
    private Layout layoutHoursChart;
    private Layout layoutMonthOneChart;
    private Layout layoutMonthTwoChart;
    private Layout layoutMonthThreeChart;
    private List<ITrace> dataPaymentsChart;
    private List<ITrace> dataHoursChart;
    private List<ITrace> dataMonthOneChart;
    private List<ITrace> dataMonthTwoChart;
    private List<ITrace> dataMonthThreeChart;

    protected override async Task OnInitializedAsync()
    {
        reports = new List<Models.MonthlyReport>();
        await GetReports();
        await PopulatePaymentsChart();
        await PopulateMonthOneChart();
        await PopulateMonthTwoChart();
        await PopulateMonthThreeChart();
        await PopulateHoursChart();

        isWorking = false;
    }

    private async Task GetReports()
    {
        switch (quarter)
        {
            case 1:
                months = new List<int>() { 1, 2, 3 };
                break;
            case 2:
                months = new List<int>() { 4, 5, 6 };
                break;
            case 3:
                months = new List<int>() { 7, 8, 9 };
                break;
            case 4:
                months = new List<int>() { 10, 11, 12 };
                break;
        }

        foreach (int month in months)
        {
            reportGenerator = new MonthlyReportsGenerator(year, month);
            await reportGenerator.GetData();
            await reportGenerator.Generate();
            var report = reportGenerator.Report;

            reports.Add(report);
        }
    }

    private Task PopulateMonthThreeChart()
    {
        layoutMonthThreeChart = new Layout
        {
            Title = new Title
            {
                Text = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[2])
            },
            Height = 250
        };

        dataMonthThreeChart = new List<ITrace>();
        var pie = new Pie
        {
            Values = new List<object>(),
            Labels = new List<object>()
        };

        foreach (KeyValuePair<Models.Client, decimal> entry in reports[2].PaymentsPerClients)
        {
            pie.Values.Add(entry.Value);
            pie.Labels.Add(entry.Key.Name);
        }
        dataMonthThreeChart.Add(pie);

        return Task.CompletedTask;
    }

    private Task PopulateMonthTwoChart()
    {
        layoutMonthTwoChart = new Layout
        {
            Title = new Title
            {
                Text = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[1])
            },
            Height = 250
        };

        dataMonthTwoChart = new List<ITrace>();
        var pie = new Pie
        {
            Values = new List<object>(),
            Labels = new List<object>()
        };

        foreach (KeyValuePair<Models.Client, decimal> entry in reports[1].PaymentsPerClients)
        {
            pie.Values.Add(entry.Value);
            pie.Labels.Add(entry.Key.Name);
        }
        dataMonthTwoChart.Add(pie);

        return Task.CompletedTask;
    }

    private Task PopulateMonthOneChart()
    {
        layoutMonthOneChart = new Layout
        {
            Title = new Title
            {
                Text = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[0])
            },
            Height = 250
        };

        dataMonthOneChart = new List<ITrace>();
        var pie = new Pie
        {
            Values = new List<object>(),
            Labels = new List<object>()
        };

        foreach (KeyValuePair<Models.Client, decimal> entry in reports[0].PaymentsPerClients)
        {
            pie.Values.Add(entry.Value);
            pie.Labels.Add(entry.Key.Name);
        }
        dataMonthOneChart.Add(pie);

        return Task.CompletedTask;
    }

    private Task PopulatePaymentsChart()
    {

        layoutPaymentsChart = new Layout
        {
            Title = new Title
            {
                Text = "Payments received"
            },
            BarMode = BarModeEnum.Stack,
            Height = 500
        };

        dataPaymentsChart = new List<ITrace>
        {
            new Bar
            {
                X = new List<object> { CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[0]),
                                        CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[1]),
                                        CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[2])},
                Y = new List<object> { reports[0].PaymentsTotal, reports[1].PaymentsTotal, reports[2].PaymentsTotal },
                Name = "Payments received"
            },
        };

        return Task.CompletedTask;
    }

    private Task PopulateHoursChart()
    {
        layoutHoursChart = new Layout
        {
            Title = new Title
            {
                Text = "Hours worked"
            },
            BarMode = BarModeEnum.Stack,
            Height = 500
        };

        dataHoursChart = new List<ITrace>
        {
            new Bar
            {
                X = new List<object> { CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[0]),
                                        CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[1]),
                                        CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(months[2])},
                Y = new List<object> { reports[0].HoursTotal, reports[1].HoursTotal, reports[2].HoursTotal },
                Name = "Hours Worked"
            },
        };
        return Task.CompletedTask;
    }
}

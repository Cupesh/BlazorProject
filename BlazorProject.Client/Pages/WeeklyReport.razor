@page "/weeklyreport/{year:int}/{weeknumber:int}"

@using System.Globalization
@using BlazorProject.Client.HttpRepository
@using BlazorProject.Client.Models
@inject HttpClient Http
@inject IContractsHttpRepository ContractsHttpRepo
@inject IClientsHttpRepository ClientsHttpRepo
@inject IEmployeesHttpRepository EmployeeHttRepo

@if (isWorking)
{
    <p>Generating report...</p>
}
else
{
    @if (filteredContracts.Count == 0)
    {
        <p>There were no contracts for week @weeknumber.ToString() / @year.ToString()</p>
    }
    else
    {
        <h3>Weekly report for week @weeknumber.ToString() / @year.ToString()</h3>

        <p>From @dates.First().ToString("d MMMM") To @dates.Last().ToString("d MMMM") </p>

        <p>These clients gave contracts:</p>

        @foreach (var client in new HashSet<Models.Client>(clients))
        {
            <p>@client.Name</p>
        }

        <p>These employees worked:</p>
        @foreach (var employee in employees)
        {
            <p>@employee.FirstName @employee.LastName</p>
        }
    }
}

@code {
    [Parameter]
    public int year { get; set; }
    [Parameter]
    public int weeknumber { get; set; }

    private bool isWorking { get; set; }

    private List<DateTime> dates = new List<DateTime>();

    private List<Models.Contract> allContracts = new List<Models.Contract>();
    private List<Models.Contract> filteredContracts = new List<Models.Contract>();

    private List<Models.Client> clients = new List<Models.Client>();
    private List<Models.Employee> employees = new List<Models.Employee>();

    protected override async Task OnInitializedAsync()
    {
        isWorking = true;
        dates = SetDateRange();

        allContracts = await ContractsHttpRepo.GetAll();
        GetContracts();
        if (filteredContracts.Count == 0)
        {
            return;
        }
        await GetClients();
        await GetEmployees();
        isWorking = false;
    }

    private async Task GetEmployees()
    {
        foreach (var contract in filteredContracts)
        {
            var result = await EmployeeHttRepo.GetOne(contract.Worker);
            employees.Add(result);
        }
    }

    private async Task GetClients()
    {
        foreach (var contract in filteredContracts)
        {
            var result = await ClientsHttpRepo.GetOne(contract.Contractor);
            clients.Add(result);
        }
    }

    private void GetContracts()
    {
        foreach (var date in dates)
        {
            foreach (var contract in allContracts)
            {
                if (contract.DateRequested.ToString("dd-MM-yyyy") == date.ToString("dd-MM-yyyy") && contract.Completed == true)
                {
                    filteredContracts.Add(contract);
                }
            }
        }
    }

    private List<DateTime> SetDateRange()
    {
        List<DateTime> dates = new List<DateTime>();
        DateTime startDate = FirstDateOfWeekISO8601(year, weeknumber);
        dates.Add(startDate);

        for (int i = 0; i < 6; i++)
        {
            startDate = startDate.AddDays(1);
            dates.Add(startDate);
        }
        return dates;
    }

    private DateTime FirstDateOfWeekISO8601(int year, int weekOfYear)
    {
        DateTime jan1 = new DateTime(year, 1, 1);
        int daysOffset = DayOfWeek.Thursday - jan1.DayOfWeek;

        // Use first Thursday in January to get first week of the year as
        // it will never be in Week 52/53
        DateTime firstThursday = jan1.AddDays(daysOffset);
        var cal = CultureInfo.CurrentCulture.Calendar;
        int firstWeek = cal.GetWeekOfYear(firstThursday, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

        var weekNum = weekOfYear;
        // As we're adding days to a date in Week 1,
        // we need to subtract 1 in order to get the right date for week #1
        if (firstWeek == 1)
        {
            weekNum -= 1;
        }

        // Using the first Thursday as starting week ensures that we are starting in the right year
        // then we add number of weeks multiplied with days
        var result = firstThursday.AddDays(weekNum * 7);

        // Subtract 3 days from Thursday to get Monday, which is the first weekday in ISO8601
        return result.AddDays(-3);
    }

}

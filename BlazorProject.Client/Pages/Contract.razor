@page "/contract/{id}"

@using BlazorProject.Client.HttpRepository
@using BlazorProject.Client.Models
@inject HttpClient Http
@inject IContractsHttpRepository ContractsHttpRepo
@inject IClientsHttpRepository ClientsHttpRepo
@inject IEmployeesHttpRepository EmployeesHttpRepo
@inject NavigationManager NavManager

@if (contract == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@contract" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <dl>
            <dt>Id Number</dt>
            <dd><InputNumber @bind-Value="contract.Id" disabled="true" /></dd>

            <dt>Requested On Date</dt>
            <dd><InputDate @bind-Value="contract.DateRequested" /></dd>

            <dt>Description</dt>
            <dd><InputTextArea @bind-Value="contract.Description" /></dd>

            <dt>Contracted By</dt>
            <dd>
                <InputSelect @bind-Value="contract.Contractor">

                    @foreach (var client in clients)
                        {
                        <option value="@client.Id">@client.Name </option>
                        }
                </InputSelect>
            </dd>

            <dt>Assigned Worker</dt>
            <dd>
                <InputSelect @bind-Value="contract.Worker">

                    @foreach (var employee in employees)
                        {
                        <option value="@employee.Id">@employee.FirstName @employee.LastName  </option>
                        }
                </InputSelect>
            </dd>

            <dt>Hours Worked</dt>
            <dd><InputNumber @bind-Value="contract.HoursWorked" /></dd>

            <dt>Completed?</dt>
            <dd><InputCheckbox @bind-Value="contract.Completed"/></dd>

            <dt>Last Updated</dt>
            <dt>@contract.Updated.ToString()</dt>
        </dl>
        <button type="submit">Update</button>
    </EditForm>
}

@code
{
    private Models.Contract contract;
    private List<Models.Client> clients;
    private List<Models.Employee> employees;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var clientsQueryResult = await ClientsHttpRepo.GetAll();
        clients = clientsQueryResult.ToList();

        var employeesQueryResult = await EmployeesHttpRepo.GetAll();
        employees = employeesQueryResult.ToList();

        int anId = Int32.Parse(id);
        contract = await ContractsHttpRepo.GetOne(anId);
    }

    private async void Submit()
    {
        await ContractsHttpRepo.PutOne(contract);

        NavManager.NavigateTo("/contracts");
    }
}